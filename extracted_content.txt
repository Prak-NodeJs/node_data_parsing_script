Open in app Sign up Sign in Write Sign up Sign in [Image: https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png] Web Scraping using Nodejs and Express [Image: https://miro.medium.com/v2/resize:fill:88:88/1*ynTmiJJFYXQjhp45R0EbHA.jpeg] Nikita Jaiswal · Follow 5 min read · Aug 31, 2023 -- Listen Share W eb scraping is one of the most popular ways to extract data from a website. Some websites contain a large amount of data that we are looking for. For example: Imagine you want to create an online shop for clothes, but you’re not sure what clothes to put on your website. Web scraping can come to the rescue! It’s like having a special tool that can go to other online shops, look at their clothes, and bring back important information like the name of the clothes, what they look like, and how much they cost. This tool helps you gather all these details from different shops to use them on your website. It’s like borrowing a bit of information from other places to help build your own shop. Web scraping means taking data from a website. This data is then gathered and turned into a more helpful format, like putting it in a spreadsheet or making it ready to use in a special way called an API. It’s like picking out important stuff from a website and making it easier for people to use. Extract data and put it into a structured format How Can we do web-scrapping in Node js 🤔 ? Let’s now understand how you can build a JavaScript web scraper with Node.js. Prerequisites Node.js with npm An IDE supporting JavaScript. I am using a Visual Code Editor This tutorial is based on Node.js 18.12 with npm 8.19 Building a JavaScript Web Scraper in Node.js Let’s now take a look at how to scrape data with Node.js in a step-by-step tutorial! Step 1: Set up a Node.js Project mkdir web-scraper cd web-scraper npm init -y This command will set up a new npm project for you. Note that the -y flag is required to make npm initialize a default project without going through an interactive process. If you omit the -y flag, you will be asked some questions in the terminal. web-scrapper should now contain a package.json that looks like as follows: I intend to utilize additional Node.js packages in my project, namely nodemon, express, axios, and cheerio. express : This is a widely recognized Node.js web framework that simplifies the process of building web applications. axios : A highly popular JavaScript library utilized for making HTTP requests, facilitating smooth network communication. nodemon : To enhance my development process, I’ll employ nodemon. This tool constantly monitors source code changes and automatically restarts the server to streamline testing. cheerio : In order to perform web scraping on the server side, I’ll be making use of cheerio. It’s a JavaScript technology known for its utility in parsing and manipulating HTML content. For in-depth understanding, you can refer to the official documentation at https://cheerio.js.org/docs/intro. npm install express axios nodemon cheerio After this, you need to specify the start nodemon server in a package.json file like this Step 2: Create an Index.js file Subsequently, enter the command “npm start” in your terminal. This action will initiate your server. By navigating to “localhost:5000” in your web browser, you’ll be greeted with a “Welcome 🙌” message, confirming that your server is up and running. Step 3: Initiate the process of web scraping Here I am going to extract the data from this website: https://www.octaveclothing.com/men In this, I’ll extract the Product Title, Description, and Price Import cheerio and axios by adding the following two lines of code to index.js : // index.js const cheerio = require("cheerio") const axios = require("axios") Now download the target website data with the help of axios like the following: // index.js await axios("https://www.octaveclothing.com/men").then((response) => { const html_data = response.data; }) Now, we have all data loaded in the html_data variable. After this, we will load this data with the help of Cheerio. const $ = cheerio.load(html_data); The Cheerio load() method accepts HTML content in string form.You should call the Cheerio variable $ because Cheerio shares basically the same syntax as jQuery. You can select an HTML element with Cheerio by using its class with: E xample: const htmlElement = $(“.elementClass”) async function cryptopriceScraper() { const url = "https://www.octaveclothing.com/men"; const result = []; await axios(url).then((response) => { const html_data = response.data; const $ = cheerio.load(html_data); const keys = ["Title","Description","Price"]; const selectedElem = ".views-infinite-scroll-content-wrapper > .row > .col-6 > .product-7 > .product-body" $(selectedElem).each((parentIndex, parentElem) => { let keyIndex = 0; const data = {}; if (parentIndex) { $(parentElem) .children() .each((childId, childElem) => { const value = $(childElem).text(); if (value) { data[keys[keyIndex]] = value; keyIndex++; } }); result.push(data); } }); }); return result; } This web scraping Node.js snippet selects all product card bodies from the targeted webpage i.e. ( https://www.octaveclothing.com/men ). Then, it iterates over all the HTML elements. For each card, it scraps the Title, Description, and Price of the Product Now, we will create one API of get type and call this function inside it. app.get("/data-scrapper", async (req, res) => { try { const data = await cryptopriceScraper(); return res.status(200).json({ result: data, }); } catch (err) { return res.status(500).json({ err: err.toString(), }); } }); Now, when you will hit this API, in the browser, it will return the scraped data in JSON format. Congrats! You started from connecting to a website and you can now scrape its data and convert it to JSON. Conclusion To wrap up, in this project, you’ve discovered how to gather information from an online store’s website. You’ve also gotten the hang of working with Cheerio to understand and modify HTML elements. Now, armed with this knowledge, you can scrape data from different websites. Just remember, before you start scraping a website, it’s important to check if it’s allowed by their rules. Have Fun Scrapping Nodejs Expressjs JavaScript Web Scraping Cheeriojs -- -- [Image: https://miro.medium.com/v2/resize:fill:144:144/1*ynTmiJJFYXQjhp45R0EbHA.jpeg] Follow Written by Nikita Jaiswal 10 Followers Web Developer Follow Help Status About Careers Press Blog Privacy Terms Text to speech Teams